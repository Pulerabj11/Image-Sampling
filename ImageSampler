from glob import glob
import os
import stat
import io
import shutil
from tkinter import FLAT
import PySimpleGUI as sg
from PIL import Image
import random
import sys
import torch
import piq
import cv2 as cv # Open Source Computer Vision (OpenCV)
# from libtiff import TIFF

def main():
    # Set the theme
    sg.theme("Dark")

    # Set accepted file types
    acceptedFileTypes = ["jpg", "JPG", "png", "PNG", "bmp", "BMP", "tiff", "TIFF", "tif", "TIF"]

    # Holds each sample saved by user
    globalSaveDict = {"sample": {}}

    # Create choose_collection_for_sample window
    def make_window_collection_picker():
        sampleLayout = [[sg.Frame("Choose a collection",[
            [sg.Frame("", [[sg.Text("Source Folder Path: ")]], relief=FLAT, size=(135, 45)),
                sg.Frame("", [[sg.InputText(size=(60, 15), key="-INPUTPATH-")]], relief=FLAT, size=(400, 45)),
                sg.Frame("", [[sg.FolderBrowse(initial_folder="M:\\Library\\Library Units\\Archives\\Archives team", pad=((5, 3),(0, 3)), size=(7, None))]], relief=FLAT, size=(115, 45))
                ],
            [sg.Frame("", [[sg.Text("Choose Percentage: ")]], relief=FLAT, size=(135, 45)), 
                sg.Frame("", [[sg.Slider(range=(1,100), default_value=1, size=(47, 15), orientation="horizontal", key="-SLIDER-")]], relief=FLAT, size=(400, 45))
                ],
            [sg.Frame("", [[sg.Button("Ok", pad=((8, 3), (5, 3)), size=(7, None))]], relief=FLAT, size=(115, 35)),
                sg.Push(),
                sg.Radio("Slow", group_id="-SPEEDRADIO-", key="-SLOWRADIO-", default=True),
                sg.Text("", key="-FILEINCOUNTER-", size=(8, None), pad=((18,3), (5,3))),
                sg.Radio("Fast", group_id="-SPEEDRADIO-", key="-FASTRADIO-"),
                sg.Push(),
                sg.Frame("", [[sg.Button("Exit", pad=((5, 8), (5, 3)), size=(7, None))]], relief=FLAT, element_justification="r" ,size=(115, 35))
                ]], size=(650, 200))]
        ]

        return sg.Window("Image Sampler", sampleLayout, use_default_focus=False)

    # Create view_sample_images window
    def make_window_image_viewer(bio, imgNum, sampledPhotos, fixed_height, fileIn):
        imageViewerLayout = [[sg.Image(data=bio.getvalue(), key="-IMAGE-")],
            [sg.Text(fileIn + "\\" + sampledPhotos[imgNum], key="-FILE-")],
            [sg.Frame("", [[sg.Button("Create Another Sample", size=(18, None))]], size=(200, 36), relief=FLAT, element_justification="l"),
                sg.Push(),
                sg.Frame("", [[sg.Button("Prev", size=(7, None)),
                    sg.Text(str(imgNum+1) + " / " + str(len(sampledPhotos)), key="-IMAGECOUNT-", size=(8, None), pad=((22,3),(5,3))),
                    sg.Button("Next", size=(7, None))]], size=(400, 36), relief=FLAT, element_justification="c"),
                sg.Push(),
                sg.Frame("", [[sg.Button("Exit", size=(18, None))]], size=(200, 36), relief=FLAT, element_justification="r")]
        ]

        return sg.Window("Sample Image Viewer", imageViewerLayout, size=(1200,fixed_height+100), element_justification="c", use_default_focus=False)

    # Create ask_to_save window
    def make_window_ask_to_save():
        savePopupLayout = [[sg.Text(text="Would you like to save this sample?")],
            [sg.Push(), sg.Button("Save", size=(7, None)), sg.Push(), sg.Button("Delete", size=(7, None)), sg.Push()]
        ]

        return sg.Window("",savePopupLayout, element_justification="c", keep_on_top=True, modal=True, use_default_focus=False)

    # Create give_sample_name window
    def make_window_give_sample_name():
        giveSampleNameLayout = [[sg.Text(text="Give the sample a name.")],
            [sg.InputText(size=(60, 15), key="-SAMPLENAMEINPUT-"), sg.Button("Submit", size=(7, None))]
        ]

        return sg.Window("", giveSampleNameLayout, element_justification="c", keep_on_top=True, modal=True, use_default_focus=False)

    def make_window_pick_sample():
        pickSampleLayout = [[sg.Listbox(values=list(globalSaveDict.keys), select_mode="LISTBOX_SELECT_MODE_SINGLE", key="-SAMPLESLISTBOX-")],
            [sg.Button("Select", size=(7, None))]
        ]
        return sg.Window("", pickSampleLayout, element_justification="l", keep_on_top=True, modal=True, use_default_focus=False)

    def saveSample():
        # TO BE MOVED TO def ask_to_save() in def view_sample_images()
        # Handle files set as 'Read-only'
        if not os.access(path, os.W_OK):                                
            os.chmod(path, stat.S_IWRITE)

        # If sample folder does not exist, create it
        if not os.path.exists(fileOut):
            os.makedirs(fileOut)

        # Copy photo from collection to sample folder
        shutil.copy(path, fileOut)

        # Set photoIsCopied to true to indicate a sample now exists
        photoIsCopied = True

    # Prompt user to pick one of the saved samples
    def pick_sample(save):
        # Create pick_sample window
        pickSampleWindow = make_window_pick_sample()
        
        # If user is picking a sample to save, add current sample to the list of samples
        if save:
            pickSampleWindow["-SAMPLESLISTBOX-"].update(list(globalSaveDict.keys).append("Current Sample"))

        # pick_sample event loop
        while True:
            # Get events and values from the window
            event, values = pickSampleWindow.read()
            # save=True: Saving a sample from the list.
            #            'Current Sample' is added to the list of samples
            # save=False: Picking a sample to view from the list
            if save:

                if event == sg.WIN_CLOSED:
                    quit()

                if event == "Select":
                    selection = values["-SAMPLESLISTBOX"]

                    print(selection)
            else: # save=False: Picking a sample to view from the list
                if event == sg.WIN_CLOSED:
                    quit()

                if event == "Select":
                    selection = values["-SAMPLESLISTBOX"]
                    print(selection)



    # Runs the image viewer
    # Browse the sampled images
    # Save or delete the samples
    def view_sample_images(fileIn, fileOut, sampledPhotos):

        # Get the image from the list of files in the sample.  Save it to memory.
        def get_image():
            # Set image from photos
            imgFilename = sampledPhotos[imgNum]
            imgFilepath = fileIn + "\\" + imgFilename
            try:
                # Resize the image
                image = Image.open(imgFilepath)
                image = image.resize([calculate_width(image), fixed_height])

                # Save image to memory
                bio = io.BytesIO()
                image.save(bio, format="PNG")

                return bio
            except Exception as e:
                print(e)
                sg.popup("Error: A non-image file made it into the sample.")
                sys.exit()

        # Calculate the width based on a fixed height
        def calculate_width(image):
            height_percent = (fixed_height / float(image.size[1]))
            width_size = int((float(image.size[0]) * float(height_percent)))
            return width_size
        
        # When Prev or Next buttons are clicked, update the image and file counter
        def update_image():
            # Get a reference to image saved in memory
            bio = get_image()
            imageViewerWindow["-IMAGE-"].update(data=bio.getvalue())
            imageViewerWindow["-IMAGECOUNT-"].update(str(imgNum+1) + " / " + str(len(outputFileList)))
            imageViewerWindow["-FILE-"].update(fileOut + "\\" + outputFileList[imgNum])

        def give_sample_name(end):
            # Create give_sample_name window
            giveSampleNameWindow = make_window_give_sample_name()

            # Set the input to a default sample name
            giveSampleNameWindow["-SAMPLENAMEINPUT-"].update("Sample" + (len(globalSaveDict) + 1))

            # give_sample_name Event Loop
            while True:
                event, values = giveSampleNameWindow.read()
                # end=False: 'Create Another Sample' was chosen.
                # end=True: 'Exit' was chosen
                if end:
                    print('HI')
                else:
                    if event == sg.WIN_CLOSED:
                        quit()

                    if event == "Submit":
                        sampleName = values["-SAMPLENAMEINPUT-"]
                        tempSaveDict = {"fileName": sampleName, "photos": sampledPhotos}
                        globalSaveDict["sample"] = tempSaveDict
                        giveSampleNameWindow.close()
                        choose_collection_for_sample()

        # Ask the user if they want to save or delete the samples
        def ask_to_save(end):
            # Create ask_to_save window
            savePopup = make_window_ask_to_save()

            # ask_to_save Event Loop
            while True:
                # Get events and values from the window
                event, values = savePopup.read()

                # end=False: 'Create Another Sample' was chosen.
                # end=True: 'Exit' was chosen
                if end:
                    if event == sg.WIN_CLOSED:
                        sys.exit()

                    # If save is chosen,
                    if event == "Save":
                        save = True
                        savePopup.close()
                        pick_sample(save)

                    # If delete is chosen, 
                    if event == "Delete":
                        savePopup.close()

                else: # 'Create Another Sample' was chosen
                    if event == sg.WIN_CLOSED:
                        quit()

                    # If save is chosen, prompt user to give the sample a name.
                    # It is saved to globalSaveDict
                    if event == "Save":
                        savePopup.close()
                        give_sample_name(end)

                    # If delete is chosen, current sample is not saved to globalSaveDict
                    if event == "Delete":
                        choose_collection_for_sample()

        # Set index to 0 for first image in imageViewerWindow
        imgNum = 0

        # Image fixed height
        fixed_height = 600

        # Get a reference to image saved in memory
        bio = get_image()

        # Fix formatting
        fileOut = fileOut.replace("\\\\", "\\")
        fileOut = fileOut.replace("/", "\\")
        fileIn = fileIn.replace("\\\\", "\\")
        fileIn = fileIn.replace("/", "\\")

        # Create Image Viewer window
        imageViewerWindow = make_window_image_viewer(bio, imgNum, sampledPhotos, fixed_height, fileIn)
        # imageViewerWindow event loop
        while True:
            # Get events and values from the window
            event, values = imageViewerWindow.read()
            if (event == sg.WIN_CLOSED) or (event == "Exit"):
                # End indicates whether to quit after saving
                end = True
                imageViewerWindow.close()
                # Ask user to save or delete the sample
                ask_to_save(end)

            # Move through next/prev images in sample
            if event == "Next":
                if imgNum != len(sampledPhotos)-1:
                    imgNum += 1
                    update_image()

            if event == "Prev":
                if imgNum != 0:
                    imgNum -= 1
                    update_image()

            if event == "Create Another Sample":
                # End indicates whether to quit after saving
                end = False
                imageViewerWindow.close()
                ask_to_save(end)

    # Runs the Collection Picker Window
    # Enter file input path
    # Pick a percentage for the sample of a collection
    def choose_collection_for_sample():

        # Create Collection Picker window
        collectionPickerWindow = make_window_collection_picker()

        # Event Loop
        while True:
            # Get events and values from the window
            event, values = collectionPickerWindow.read()

            if event == sg.WIN_CLOSED:
                collectionPickerWindow.close()
                sys.exit()

            # On press of "OK" button, take a sample of a collection of photos
            if event == "Ok":
                # Set file I/O
                fileIn = values['-INPUTPATH-'].replace("\\","\\\\")  # Location of photos to be sampled
                fileIn = fileIn.replace("\\\\\\\\uwpfs.ad.uwp.edu\\\\Departments", "M:") # Replace if server location is given

                fileOut = fileIn + "\\Samples"

                # Check for formatting issues before checking the folder paths
                if not os.path.exists(fileIn):
                    sg.popup("Invalid source folder path!", keep_on_top=True, modal=True)                  
                else:
                    # User sets the percent of collection they want
                    chance = values["-SLIDER-"]

                    # Initialized to check if > 0 files have been copied
                    photoIsCopied = False

                    # List of files in source folder
                    sourceFileList = os.listdir(fileIn)

                    # Initialize file counter for source read
                    fileInCount = 0

                    # Slow setting picked.  Brisque scoring is ignored.
                    isSlow = values["-SLOWRADIO-"]

                    # Clean up the sourceFilList
                    for collectionPhoto in sourceFileList[:]:
                        # Get the extension of the file and check against acceptedFileTypes
                        if "." in collectionPhoto:
                            splitFileName = collectionPhoto.split(".")
                            ext = splitFileName[1]
                            if (ext not in acceptedFileTypes):
                                sourceFileList.remove(collectionPhoto)
                        else:
                            sourceFileList.remove(collectionPhoto)

                    # Get length for use when updating FILECOUNTER
                    sourceFileListLen = len(sourceFileList)

                    # Initialize list to hold names of photos picked for the sample
                    sampledPhotos = []

                    # TESTING
                    # acceptedBrisqueScores = []
                    # unacceptedBrisqueScores = []
                    # blurArray = []

                    # Copy a sample from source folder to output folder
                    for collectionPhoto in sourceFileList:
                        # Update the file counter
                        collectionPickerWindow["-FILEINCOUNTER-"].update(str(fileInCount) + " / " + str(sourceFileListLen))
                        collectionPickerWindow.refresh()
                        fileInCount+=1

                        # Copy photos based on chance to create a sample
                        if 100*random.random() <= chance:
                            path=os.path.join(fileIn, collectionPhoto)
                            sampledPhotos.append(collectionPhoto)

                            # Get blur score.  Low score == blurry
                            img = cv.imread(path)
                            grey = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
                            blurScore = cv.Laplacian(grey, cv.CV_64F).var()

                            # Testing (Use slow option)
                            # print(collectionPhoto + ": (Blur = " + str(blurScore)  + ") + (Brisque = " + str(brisqueScore.item()) + ")")

                            # Slow run
                            if (isSlow):
                                # Get image quality score (BRISQUE method)
                                # BRISQUE values typically range between 0 (Very good quality) and 150 (very bad quality).
                                # Some clean images may show high BRISQUE values based on the nature of the image.
                                x = torch.tensor(cv.imread(path)).permute(2, 0, 1)[None, ...] / 255.
                                brisqueScore = piq.brisque(x, data_range=1., reduction='none')

                                # If blurScore and brisqueScore is acceptable, copy photo to sample
                                if (blurScore > 35 and brisqueScore < 70):
                                    # Add the photo name to a list in order to save a 
                                    sampledPhotos.append(collectionPhoto)

                                    # TESTING (Use slow option)
                                    # if blurScore < 50:
                                    #     acceptedBrisqueScores.append(brisqueScore.item())
                                    #     blurArray.append(blurScore)
                                    # else: unacceptedBrisqueScores.append(brisqueScore.item())

                            else: # Fast run
                                # is blurScore is acceptable, copy photo to sample
                                if (blurScore > 35):
                                    # Add the photo name to a list in order to save a 
                                    sampledPhotos.append(collectionPhoto)

                    # Testing (Use slow option)
                    # print("Brisque Scores")
                    # print("Accepted: ", acceptedBrisqueScores)
                    # print("         AVG: ", sum(acceptedBrisqueScores)/len(acceptedBrisqueScores))
                    # print("         MAX: ", max(acceptedBrisqueScores))
                    # print("         MIN: ", min(acceptedBrisqueScores))
                    # if (len(unacceptedBrisqueScores) > 0):
                    #     print("Unaccepted:", unacceptedBrisqueScores)
                    #     print("         AVG: ", sum(unacceptedBrisqueScores)/len(unacceptedBrisqueScores))
                    #     print("         MAX: ", max(unacceptedBrisqueScores))
                    #     print("         MIN: ", min(unacceptedBrisqueScores))
                    
                    # If no photos were sampled, notify user
                    if not photoIsCopied:
                        sg.popup("Sample is too small! Try a larger percentage.", keep_on_top=True, modal=True)
                    else:
                        collectionPickerWindow.close()
                        # Open Image Viewer window
                        view_sample_images(fileIn, fileOut, sampledPhotos)

    # Call func to open window for choosing a collection
    choose_collection_for_sample()

# MAIN
if __name__ == "__main__":
    main()