from glob import glob
import os
import stat
import io
import shutil # Shell Utilities
from tkinter import FLAT
import PySimpleGUI as sg
from PIL import Image # Pillow
import random
import sys # System
import torch # PyTorch
import piq # Py Image Quality
import cv2 as cv # Open Source Computer Vision (OpenCV)
# from libtiff import TIFF

def main():
    # Set the theme
    sg.theme("Dark")

    # Set accepted file types
    acceptedFileTypes = ["jpg", "JPG", "png", "PNG", "bmp", "BMP", "tiff", "TIFF", "tif", "TIF"]

    # Holds each sample saved by user
    globalSaveDict = {}

    # Create choose_collection_for_sample window
    def make_window_collection_picker():
        sampleLayout = [[sg.Frame("Choose a collection",[
            [sg.Frame("", [[sg.Text("Source Folder Path: ")]], relief=FLAT, size=(135, 45)),
                sg.Frame("", [[sg.InputText(size=(60, 15), key="-INPUTPATH-", focus=True)]], relief=FLAT, size=(400, 45)),
                sg.Frame("", [[sg.FolderBrowse(initial_folder="M:\\Library\\Library Units\\Archives\\Archives team", pad=((5, 3),(0, 3)), size=(7, None))]], relief=FLAT, size=(115, 45))
                ],
            [sg.Frame("", [[sg.Text("Choose Percentage: ")]], relief=FLAT, size=(135, 45)), 
                sg.Frame("", [[sg.Slider(range=(1,100), default_value=1, size=(47, 15), orientation="horizontal", key="-SLIDER-")]], relief=FLAT, size=(400, 45)),
                sg.Frame("", [[sg.Button("Sample Viewer", key="-SAMPLEVIEWER-", pad=((5, 3),(0, 3)), size=(7, None), visible=False)]], relief=FLAT, size=(115, 45))
                ],
            [sg.Frame("", [[sg.Button("Ok", pad=((8, 3), (5, 3)), size=(7, None))]], relief=FLAT, size=(115, 35)),
                sg.Push(),
                sg.Radio("Slow", group_id="-SPEEDRADIO-", key="-SLOWRADIO-", default=True),
                sg.Text("", key="-FILEINCOUNTER-", size=(8, None), pad=((18,3), (5,3))),
                sg.Radio("Fast", group_id="-SPEEDRADIO-", key="-FASTRADIO-"),
                sg.Push(),
                sg.Frame("", [[sg.Button("Exit", pad=((5, 8), (5, 3)), size=(7, None))]], relief=FLAT, element_justification="r" ,size=(115, 35))
                ]], size=(650, 200))]
        ]
        return sg.Window("Image Sampler", sampleLayout, use_default_focus=False, finalize=True)

    # Create view_sample_images window
    def make_window_image_viewer(bio, imgNum, sampledPhotos, fixed_height, fileIn):
        buttonsLayout = [
            [
                sg.Button("Create Another Sample", size=(18, None)),
                sg.Push(),
                sg.Button("Prev", size=(7, None), pad=(0,3)),
                sg.Text(str(imgNum+1) + " / " + str(len(sampledPhotos)), key="-IMAGECOUNT-", size=(12, None), justification="c"),
                sg.Button("Next", size=(7, None), pad=(0,3)),
                sg.Push(),
                sg.Button("Exit", size=(18, None))
            ]
        ]
        
        imageCol = [
            #Image in brackets
            [sg.Image(data=bio.getvalue(), key="-IMAGE-")],
            #Image name in brackets
            [sg.Text(fileIn + "\\" + sampledPhotos[imgNum], key="-FILE-", justification="c")],
            
            #Buttons in bracket
            [sg.Frame("", buttonsLayout, size=(700, 36), relief=FLAT)]
        ]

        listCol = [
            #Listbox in brackets
            [sg.Listbox(values=list(globalSaveDict), enable_events=True, select_mode="LISTBOX_SELECT_MODE_SINGLE", key="-SAMPLESLISTBOX-", default_values="Current Sample", size=(40, 30))],
            #Save button in brackets
            [sg.Button("Save", size=(7, None))]
        ]
        
        imageViewerLayout = [
            [
                sg.Frame("", imageCol, size=(1028,698), element_justification="c"),
                sg.Frame("", listCol, size=(248,698))]
        ]
        return sg.Window("Sample Image Viewer", imageViewerLayout, size=(1280,fixed_height+100), use_default_focus=False)

    # Create ask_to_save window
    def make_window_ask_to_save():
        askToSaveLayout = [[[sg.Text(text="Would you like to save a sample?")],
            [sg.Push(), sg.Button("Yes", size=(7, None)), sg.Push(), sg.Button("No", size=(7, None)), sg.Push()]]
        ]
        return sg.Window("", askToSaveLayout, element_justification="c", keep_on_top=True, modal=True, use_default_focus=False)

    # Create give_sample_name window
    def make_window_give_sample_name():
        giveSampleNameLayout = [[[sg.Text(text="Give this sample a name.")],
            [sg.InputText(size=(60, 15), key="-SAMPLENAMEINPUT-"), sg.Button("Submit", size=(7, None), bind_return_key=True)]]
        ]
        return sg.Window("", giveSampleNameLayout, element_justification="c", keep_on_top=True, modal=True)

    def make_window_pick_sample():
        pickSampleLayout = [[[sg.Listbox(values=list(globalSaveDict.keys), enable_events=True, select_mode="LISTBOX_SELECT_MODE_SINGLE", key="-XXXXXXX-")],
            [sg.Button("Select", size=(7, None))]]
        ]
        return sg.Window("", pickSampleLayout, element_justification="l", keep_on_top=True, modal=True)

    def make_window_notify_of_unsaved_samples():
        notifyOfUnsavedSamplesLayout = [
            [sg.Text("Are you sure you want to quit?\n You have unsaved samples.")],
            [sg.Button("Yes"), sg.Button("No")]
        ]
        return sg.Window("", notifyOfUnsavedSamplesLayout, element_justification="c", keep_on_top=True, modal=True)

    # Loop through the photos given by the sampleName key in globalSaveDict
    # Copy them to a new folder created with the sample name
    def saveSample(fileIn, sampleName):
        fileOut = fileIn + "\\" + sampleName

        # Create sample folder
        os.makedirs(fileOut)

        # For each photo, fix 'Read-only' property and copy to the sample directory
        for photo in globalSaveDict[sampleName]:
            # Path to each photo in globalSaveDict
            path = fileIn + "\\" + photo

            # Handle files set as 'Read-only'
            if not os.access(path, os.W_OK):
                os.chmod(path, stat.S_IWRITE)

            # Copy photo from collection to sample folder
            shutil.copy(path, fileOut)

#     # Prompt user to pick one of the saved samples
#     def pick_sample(save):
#         # Create pick_sample window
#         pickSampleWindow = make_window_pick_sample()
        
#         # If user is picking a sample to save, add current sample to the list of samples
#         if save:
#             pickSampleWindow["-SAMPLESLISTBOX-"].update(list(globalSaveDict.keys).append("Current Sample"))

# ####### pick_sample event loop
#         while True:
#             # Get events and values from the window
#             event, values = pickSampleWindow.read()
#             # save=True: Saving a sample from the list.
#             #            'Current Sample' is added to the list of samples
#             # save=False: Picking a sample to view from the list
#             if save:
#                 if event == sg.WIN_CLOSED:
#                     sys.exit()

#                 if event == "Select":
#                     selection = values["-SAMPLESLISTBOX"]
#             else: # save=False: Picking a sample to view from the list
#                 if event == sg.WIN_CLOSED:
#                     sys.exit()

#                 if event == "Select":
#                     selection = values["-SAMPLESLISTBOX"]

    # Runs the image viewer
    # Browse the sampled images
    # Save or delete the samples
    def view_sample_images(fileIn):

        # Get the image from the list of files in the sample.  Save it to memory.
        def get_image():
            # Set image from sampledPhotos
            imgFilename = photosList[imgNum]
            imgFilepath = fileIn + "\\" + imgFilename
            try:
                # Resize the image
                image = Image.open(imgFilepath)
                image = image.resize([calculate_width(image), fixed_height])

                # Save image to memory
                bio = io.BytesIO()
                image.save(bio, format="PNG")

                return bio
            except Exception as e:
                print("ERROR: " + e)
                sg.popup("Error: A non-image file made it into the sample.")
                sys.exit()

        # Calculate the width based on a fixed height
        def calculate_width(image):
            height_percent = (fixed_height / float(image.size[1]))
            width_size = int((float(image.size[0]) * float(height_percent)))
            return width_size
        
        # When Prev or Next buttons are clicked, update the image and file counter
        def update_image():
            # Get a reference to image saved in memory
            bio = get_image()
            try:
                imageViewerWindow["-IMAGE-"].update(data=bio.getvalue())
            except Exception as e:
                print("ERROR: " + e)
            imageViewerWindow["-IMAGECOUNT-"].update(str(imgNum+1) + " / " + str(len(photosList)))
            imageViewerWindow["-FILE-"].update(fileIn + "\\" + photosList[imgNum])

        def give_sample_name(fileIn):
            # Create give_sample_name window
            giveSampleNameWindow = make_window_give_sample_name()

            # give_sample_name Event Loop
            while True:
                event, values = giveSampleNameWindow.read()

                if event == sg.WIN_CLOSED:
                    # view_sample_images(fileIn)
                    giveSampleNameWindow.close()
                    break

                # Save the new same to the dictionary and open the choose_collection_for_sample window
                if event == "Submit":
                    # Get sample name from listBox element
                    sampleName = values["-SAMPLENAMEINPUT-"]

                    # Filepath to check if the sample name is already in use
                    path = fileIn + "\\" + sampleName

                    # Controls whether to accept the sample name
                    acceptableName = True

                    if sampleName == "":
                        sg.popup("Please enter a name.", keep_on_top=True, modal=True)
                        acceptableName = False
                    else:
                        for key in globalSaveDict.keys():
                            if (sampleName == key) or (os.path.exists(path)):
                                sg.popup("Name taken. Choose another name.", keep_on_top=True, modal=True)
                                acceptableName = False

                    # If the sample name is not a duplicate, update globalSaveDict
                    if acceptableName:
                        # Save new name to globalSaveDict
                        globalSaveDict[sampleName] = globalSaveDict.pop("Current Sample")
                        giveSampleNameWindow.close()
                        return sampleName

        # # Ask the user if they want to save a sample
        # def ask_to_save():
        #     # Create ask_to_save window
        #     askToSaveWindow = make_window_ask_to_save()

        #     # ask_to_save Event Loop
        #     while True:
        #         # Get events and values from the window
        #         event, values = askToSaveWindow.read()

        #         if event == sg.WIN_CLOSED:
        #             sys.exit()

        #         # If save is chosen,
        #         if event == "Save":
        #             save = True
        #             askToSaveWindow.close()
        #             pick_sample(save)

        #         # If delete is chosen, 
        #         if event == "Delete":
        #             askToSaveWindow.close()

        # Set index to 0 for first image in imageViewerWindow
        imgNum = 0

        # Image fixed height
        fixed_height = 600

        # Get initial list of photos to populate the viewer
        photosList = globalSaveDict.get("Current Sample")

        # Get a reference to image saved in memory
        bio = get_image()

        # Fix formatting
        # fileOut = fileOut.replace("\\\\", "\\")
        # fileOut = fileOut.replace("/", "\\")
        fileIn = fileIn.replace("\\\\", "\\")
        fileIn = fileIn.replace("/", "\\")

        # Create Image Viewer window
        imageViewerWindow = make_window_image_viewer(bio, imgNum, photosList, fixed_height, fileIn)

        # imageViewerWindow event loop
        while True:
            # Get events and values from the window
            event, values = imageViewerWindow.read()
            imageViewerWindow.bind('<Right>', 'Next')
            imageViewerWindow.bind('<Left>', 'Prev')
            
            if (event == sg.WIN_CLOSED) or (event == "Exit"):
                sys.exit()

            # Move through next/prev images in sample
            if event == "Prev":
                if imgNum != 0:
                    imgNum -= 1
                    update_image()

            if event == "Next":
                if imgNum != len(photosList)-1:
                    imgNum += 1
                    update_image()

            # Move back to collectionPickerWindow
            if event == "Create Another Sample":
                give_sample_name(fileIn)
                imageViewerWindow.close()
                choose_collection_for_sample()

            # Save the current selected sample
            if event == "Save":
                sampleName = imageViewerWindow["-SAMPLESLISTBOX-"].get()[0]
                # If the selected sample is unnamed (Current Sample), prompt the user to name it
                if (sampleName == "Current Sample"):
                    # Get user input for new sample name
                    sampleName = give_sample_name(fileIn)

                saveSample(fileIn, sampleName)
                imageViewerWindow.close()
                sys.exit()

            # If a sample is clicked in the list box, update the photosList to show that sample
            if event == "-SAMPLESLISTBOX-":
                imgNum = 0
                photosList = globalSaveDict.get(imageViewerWindow["-SAMPLESLISTBOX-"].get()[0])
                update_image()

    # Runs the Collection Picker Window
    # Enter file input path
    # Pick a percentage for the sample of a collection
    def choose_collection_for_sample():

        # Create Collection Picker window
        collectionPickerWindow = make_window_collection_picker()

        # Event Loop
        while True:
            # Get events and values from the window
            event, values = collectionPickerWindow.read()

            if event == sg.WIN_CLOSED:
                collectionPickerWindow.close()
                sys.exit()

            # On press of "OK" button, take a sample of a collection of photos
            if event == "Ok":
                # Set file I/O
                fileIn = values['-INPUTPATH-'].replace("\\","\\\\")  # Location of photos to be sampled
                fileIn = fileIn.replace("\\\\\\\\uwpfs.ad.uwp.edu\\\\Departments", "M:") # Replace if server location is given

                # Check for formatting issues before checking the folder paths
                if not os.path.exists(fileIn):
                    sg.popup("Invalid source folder path!", keep_on_top=True, modal=True)                  
                else:
                    # User sets the percent of collection they want
                    chance = values["-SLIDER-"]

                    # Initialized to check if > 0 files have been sampled
                    sampleEmpty = True

                    # List of files in source folder
                    sourceFileList = os.listdir(fileIn)

                    # Initialize file counter for source read
                    fileInCount = 0

                    # Slow setting picked.  Brisque scoring is ignored.
                    isSlow = values["-SLOWRADIO-"]

                    # Clean up the sourceFilList
                    for collectionPhoto in sourceFileList[:]:
                        # Get the extension of the file and check against acceptedFileTypes
                        if "." in collectionPhoto:
                            splitFileName = collectionPhoto.split(".")
                            ext = splitFileName[1]
                            if (ext not in acceptedFileTypes):
                                sourceFileList.remove(collectionPhoto)
                        else:
                            sourceFileList.remove(collectionPhoto)

                    # Get length for use when updating FILECOUNTER
                    sourceFileListLen = len(sourceFileList)

                    # Initialize list to hold names of photos picked for the sample
                    sampledPhotos = []

                    # TESTING
                    # acceptedBrisqueScores = []
                    # unacceptedBrisqueScores = []
                    # blurArray = []

                    # Copy a sample from source folder to output folder
                    for collectionPhoto in sourceFileList:
                        # Update the file counter
                        collectionPickerWindow["-FILEINCOUNTER-"].update(str(fileInCount) + " / " + str(sourceFileListLen))
                        collectionPickerWindow.refresh()
                        fileInCount+=1

                        # Copy photos based on chance to create a sample
                        if 100*random.random() <= chance:
                            path=os.path.join(fileIn, collectionPhoto)

                            # Get blur score.  Low score == blurry
                            img = cv.imread(path)
                            grey = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
                            blurScore = cv.Laplacian(grey, cv.CV_64F).var()

                            # Slow run
                            if (isSlow):
                                # Get image quality score (BRISQUE method)
                                # BRISQUE values typically range between 0 (Very good quality) and 150 (very bad quality).
                                # Some clean images may show high BRISQUE values based on the nature of the image.
                                x = torch.tensor(cv.imread(path)).permute(2, 0, 1)[None, ...] / 255.
                                brisqueScore = piq.brisque(x, data_range=1., reduction='none')

                                # Testing (Use slow option)
                                # print(collectionPhoto + ": (Blur = " + str(blurScore)  + ") + (Brisque = " + str(brisqueScore.item()) + ")")

                                # If blurScore and brisqueScore is acceptable, copy photo to sample
                                if (blurScore > 35 and brisqueScore < 70):
                                    # Add the photo name to a list in order to save a 
                                    sampledPhotos.append(collectionPhoto)
                                    # Set sampleEmpty to false to indicate a sample now exists
                                    sampleEmpty = False

                                    # TESTING (Use slow option)
                                    # if blurScore < 50:
                                    #     acceptedBrisqueScores.append(brisqueScore.item())
                                    #     blurArray.append(blurScore)
                                    # else: unacceptedBrisqueScores.append(brisqueScore.item())

                            else: # Fast run
                                # is blurScore is acceptable, copy photo to sample
                                if (blurScore > 35):
                                    # Add the photo name to a list in order to save a 
                                    sampledPhotos.append(collectionPhoto)
                                    # Set sampleEmpty to false to indicate a sample now exists
                                    sampleEmpty = False

                    # Testing (Use slow option)
                    # print("Brisque Scores")
                    # print("Accepted: ", acceptedBrisqueScores)
                    # print("         AVG: ", sum(acceptedBrisqueScores)/len(acceptedBrisqueScores))
                    # print("         MAX: ", max(acceptedBrisqueScores))
                    # print("         MIN: ", min(acceptedBrisqueScores))
                    # if (len(unacceptedBrisqueScores) > 0):
                    #     print("Unaccepted:", unacceptedBrisqueScores)
                    #     print("         AVG: ", sum(unacceptedBrisqueScores)/len(unacceptedBrisqueScores))
                    #     print("         MAX: ", max(unacceptedBrisqueScores))
                    #     print("         MIN: ", min(unacceptedBrisqueScores))
                    
                    # If no photos were sampled, notify user
                    if sampleEmpty:
                        collectionPickerWindow["-FILEINCOUNTER-"].update("")
                        collectionPickerWindow.refresh()
                        sg.popup("Sample is too small!", "Try a larger percentage.", title="", keep_on_top=True, modal=True)
                    else:
                        collectionPickerWindow.close()

                        globalSaveDict["Current Sample"] = sampledPhotos

                        # Open Image Viewer window
                        view_sample_images(fileIn)

    # Call func to open window for choosing a collection
    choose_collection_for_sample()

# MAIN
if __name__ == "__main__":
    main()