import os, stat, io, random, sys
import shutil # Shell Utilities
import PySimpleGUI as sg
from PIL import Image, ImageOps # Pillow
import torch # PyTorch
import piq # PyTorch Image Quality
import cv2 as cv # Open Source Computer Vision (OpenCV)

def main():
    # Controls printed testing results
    isTesting = False

    # Set the theme
    sg.theme("BrownBlue")

    # Initialize fileIn
    fileIn = ""

    # Set accepted file types
    acceptedFileTypes = ["jpg", "JPG", "png", "PNG", "bmp", "BMP", "tiff", "TIFF", "tif", "TIF"]

    # Holds each sample saved by user
    globalSaveDict = {}

    # # Create choose_collection_for_sample window
    def make_window_collection_picker():
        sourceFolderRow = [
            [
                sg.Text("Source Folder Path: "),
                sg.Input(size=(59,15), key="-INPUTPATH-", tooltip="Select a folder with a collection of photos", focus=True, disabled_readonly_background_color=("#4d4d4d")),
                sg.Push(),
                sg.Frame("", [[sg.FolderBrowse(key="-BROWSE-", target="-INPUTPATH-", size=(7, None), pad=(0,0))]], pad=(0,0), element_justification="r", relief=sg.RELIEF_FLAT)
            ]
        ]

        percentSliderRow = [
            [
                sg.Text("Choose Percentage: "),
                sg.Slider(range=(1,100), default_value=1, size=(46.2, 15), orientation="horizontal", key="-SLIDER-", tooltip="Percentage of photos to include in the sample", pad=((3,5),(3,3))),
            ]
        ]

        checkboxOptions = [
            [
                sg.Push(),
                sg.Checkbox("Blur", key="-BLURCHECKBOX-", tooltip="Fast"),
                sg.Frame("", [[sg.Text("", key="-FILEINCOUNTER-", pad=((5,5),(2,0)), justification="c")]], size=(100, 40), pad=(5,0), element_justification="c", relief=sg.RELIEF_FLAT),
                sg.Checkbox("BRISQUE", key="-BRISQUECHECKBOX-", tooltip="Slow"),
                sg.Push()
            ]
        ]

        optionsAndButtonsRow = [
            [
                sg.Frame("", [[sg.Button("Ok", key="-OKBUTTON-", size=(7, None), pad=(0,0), bind_return_key=True)]], pad=(0,0), element_justification="l", relief=sg.RELIEF_FLAT),
                sg.Push(),
                sg.Frame("", checkboxOptions, relief=sg.RELIEF_FLAT),
                sg.Push(),
                sg.Frame("", [[sg.Button("Exit", key="-EXITBUTTON-", size=(7, None), pad=(0,0))]], pad=(0,0), element_justification="r", relief=sg.RELIEF_FLAT)
            ]
        ]

        collectionPickerLayout = [
            [
                sg.Frame("Choose a collection",
                    [
                        [sg.Frame("", sourceFolderRow, size=(650, 40), relief=sg.RELIEF_FLAT)],
                        [sg.Frame("", percentSliderRow, relief=sg.RELIEF_FLAT)],
                        [sg.Frame("", optionsAndButtonsRow, size=(650, 40), relief=sg.RELIEF_FLAT)]
                    ]
                    ,size=(650, 165)
                )
            ]
        ]

        return sg.Window("Collection Picker", collectionPickerLayout, use_default_focus=False, finalize=True)

    # Create view_sample_images window
    def make_window_image_viewer(bio, imgNum, sampledPhotos, fixed_height, fileIn):
        buttonsRow = [
            [
                sg.Button("Add", key="-ADDTOSAMPLE-"),
                sg.Button("Prev", size=(7, None), pad=(0,3)),
                sg.Text(str(imgNum+1) + " / " + str(len(sampledPhotos)), key="-IMAGECOUNT-", size=(12, None), justification="c"),
                sg.Button("Next", size=(7, None), pad=(0,3)),
                sg.Button("Remove", key="-REMOVEFROMSAMPLE-")
            ],
            [
                sg.Button("Create Another Sample", size=(18, None)),
                sg.Push(),
                sg.Radio("Accepted", group_id="-ACCEPTEDRADIOGROUP-", key="-ACCEPTEDRADIO-", enable_events=True, default=True),
                sg.Push(),
                sg.Radio("Rejected", group_id="-ACCEPTEDRADIOGROUP-", key="-REJECTEDRADIO-", enable_events=True),
                sg.Push(),
                sg.Button("Exit", size=(18, None))
            ]
        ]
        
        imageCol = [
            [sg.Image(data=bio.getvalue(), key="-IMAGE-")],
            [sg.Text(fileIn + "\\" + sampledPhotos[imgNum], key="-FILE-", justification="c")],
            [sg.Frame("", buttonsRow, size=(850, 72), relief=sg.RELIEF_FLAT, element_justification="c")]
        ]

        listCol = [
            [sg.Listbox(values=list(globalSaveDict), enable_events=True, select_mode="LISTBOX_SELECT_MODE_SINGLE", key="-SAMPLESLISTBOX-", default_values=list(globalSaveDict)[-1], size=(40, 39))],
            [sg.Button("Save", size=(7, None))]
        ]
        
        imageViewerLayout = [
            [
                sg.Frame("", imageCol, size=(1028,730), element_justification="c"),
                sg.Frame("", listCol, size=(248,730))
            ]
        ]

        return sg.Window("Image Viewer", imageViewerLayout, size=(1280,fixed_height+132), use_default_focus=False, finalize=True)

    # Create rename_sample window
    def make_window_rename_current_sample():
        giveSampleNameLayout = [
            [
                [sg.Text(text="Rename 'Current Sample'.")],
                [sg.InputText(size=(25, 15), key="-SAMPLENAMEINPUT-", focus=True, ), sg.Button("Submit", size=(7, None), bind_return_key=True)]
            ]
        ]

        return sg.Window("", giveSampleNameLayout, element_justification="c", keep_on_top=True, modal=True, finalize=True)

    # Create rename_sample window
    def make_window_rename_sample():
        giveSampleNameLayout = [
            [
                [sg.Text(text="Rename this sample.")],
                [sg.InputText(size=(25, 15), key="-SAMPLENAMEINPUT-", focus=True), sg.Button("Submit", size=(7, None), bind_return_key=True)]
            ]
        ]

        return sg.Window("", giveSampleNameLayout, element_justification="c", keep_on_top=True, modal=True, finalize=True)

    # Create ask_to_save window
    def make_window_ask_to_save():
        askToSaveLayout = [
            [
                [sg.Text(text="Would you like to save a sample?")],
                [sg.Push(), sg.Button("Yes", size=(7, None)), sg.Push(), sg.Button("No", size=(7, None)), sg.Push()]
            ]
        ]

        return sg.Window("", askToSaveLayout, element_justification="c", keep_on_top=True, modal=True, use_default_focus=False)

    # Loop through the photos given by the sampleName key in globalSaveDict
    # Copy them to a new folder created with the sample name
    def saveSample(fileIn, sampleName):
        fileOut = fileIn + "\\" + sampleName

        # Create sample folder
        os.makedirs(fileOut)

        # For each photo, fix 'Read-only' property and copy to the sample directory
        for photo in globalSaveDict[sampleName][0]:
            # Path to each photo in globalSaveDict
            path = fileIn + "\\" + photo

            # Handle files set as 'Read-only'
            if not os.access(path, os.W_OK):
                os.chmod(path, stat.S_IWRITE)

            # Copy photo from collection to sample folder
            shutil.copy(path, fileOut)

        # Open the output folder
        os.startfile(fileOut)

    # Prints values associated with accepted/unaccepted blur and brisque scores
    def testing(isBlur, isBrisque, accepted, unaccepted):
        # Slow accepted/unaccepted are dicts where key/value = string/[float, float]
        # Fast accepted/unaccepted are dicts where key/value = string/[float]

        acceptedBlurScores = []
        unacceptedBlurScores = []
        acceptedBrisqueScores = []
        unacceptedBrisqueScores = []

        # Slow run looks at blur and brisque scores
        if (isBlur and isBrisque):
            print("\n----Image Quality Assessment Scores----")

            # Print individual accepted photo results
            print("Accepted Photos")
            for photo in accepted:
                print("         " + str(photo) + ": (Blur = " + str(accepted[photo][0])  + ") + (Brisque = " + str(accepted[photo][1]) + ")" +"( + (Combined = " + str(accepted[photo][1]/accepted[photo][0]) + ")")
                acceptedBlurScores.append(accepted[photo][0])
                acceptedBrisqueScores.append(accepted[photo][1])

            # Print individual unaccepted photo results
            print("\nUnaccepted Photos")
            for photo in unaccepted:
                print("         " + str(photo) + ": (Blur = " + str(unaccepted[photo][0])  + ") + (Brisque = " + str(unaccepted[photo][1]) + ")" +"( + (Combined = " + str(unaccepted[photo][1]/unaccepted[photo][0]) + ")")

                unacceptedBlurScores.append(unaccepted[photo][0])
                unacceptedBrisqueScores.append(unaccepted[photo][1])

            # Print blur score statistics
            print("\n-Blur Scores-")
            if (len(acceptedBlurScores) > 0):
                print("Accepted: ", acceptedBlurScores)
                print("         AVG: ", round(sum(acceptedBlurScores)/len(acceptedBlurScores), 2))
                print("         MAX: ", max(acceptedBlurScores))
                print("         MIN: ", min(acceptedBlurScores))
            if (len(unacceptedBlurScores) > 0):
                print("Unaccepted: ", unacceptedBlurScores)
                print("         AVG: ", round(sum(unacceptedBlurScores)/len(unacceptedBlurScores), 2))
                print("         MAX: ", max(unacceptedBlurScores))
                print("         MIN: ", min(unacceptedBlurScores))

            # Print brisque score statistics
            print("\n-Brisque Scores-")
            if (len(acceptedBrisqueScores) > 0):
                print("Accepted: ", acceptedBrisqueScores)
                print("         AVG: ", round(sum(acceptedBrisqueScores)/len(acceptedBrisqueScores), 2))
                print("         MAX: ", max(acceptedBrisqueScores))
                print("         MIN: ", min(acceptedBrisqueScores))
            if (len(unacceptedBrisqueScores) > 0):
                print("Unaccepted: ", unacceptedBrisqueScores)
                print("         AVG: ", round(sum(unacceptedBrisqueScores)/len(unacceptedBrisqueScores), 2))
                print("         MAX: ", max(unacceptedBrisqueScores))
                print("         MIN: ", min(unacceptedBrisqueScores))
        
        elif isBlur: # Fast run only looks at blur scores
            print("\n----Image Quality Assessment Scores----")

            # Print individual accepted photo results
            print("Accepted Photos")
            for photo in accepted:
                print("         " + str(photo) + ": (Blur = " + str(accepted[photo][0])  + ")")
                acceptedBlurScores.append(accepted[photo][0])

            # Print individual unaccepted photo results
            print("\nUnaccepted Photos")
            for photo in unaccepted:
                print("         " + str(photo) + ": (Blur = " + str(unaccepted[photo][0])  + ")")
                unacceptedBlurScores.append(unaccepted[photo][0])

            # Print blur score statistics
            print("\n-Blur Scores-")
            if (len(acceptedBlurScores) > 0):
                print("Accepted: ", acceptedBlurScores)
                print("         AVG: ", round(sum(acceptedBlurScores)/len(acceptedBlurScores), 2))
                print("         MAX: ", max(acceptedBlurScores))
                print("         MIN: ", min(acceptedBlurScores))
            if (len(unacceptedBlurScores) > 0):
                print("Unaccepted: ", unacceptedBlurScores)
                print("         AVG: ", round(sum(unacceptedBlurScores)/len(unacceptedBlurScores), 2))
                print("         MAX: ", max(unacceptedBlurScores))
                print("         MIN: ", min(unacceptedBlurScores))
        elif isBrisque: # Fast run only looks at blur scores
            print("\n----Image Quality Assessment Scores----")

            # Print individual accepted photo results
            print("Accepted Photos")
            for photo in accepted:
                print("         " + str(photo) + ": (Brisque = " + str(accepted[photo][0])  + ")")
                acceptedBrisqueScores.append(accepted[photo][0])

            # Print individual unaccepted photo results
            print("\nUnaccepted Photos")
            for photo in unaccepted:
                print("         " + str(photo) + ": (Brisque = " + str(unaccepted[photo][0])  + ")")
                unacceptedBrisqueScores.append(unaccepted[photo][0])

            # Print brisque score statistics
            print("\n-Brisque Scores-")
            if (len(acceptedBrisqueScores) > 0):
                print("Accepted: ", acceptedBrisqueScores)
                print("         AVG: ", round(sum(acceptedBrisqueScores)/len(acceptedBrisqueScores), 2))
                print("         MAX: ", max(acceptedBrisqueScores))
                print("         MIN: ", min(acceptedBrisqueScores))
            if (len(unacceptedBrisqueScores) > 0):
                print("Unaccepted: ", unacceptedBrisqueScores)
                print("         AVG: ", round(sum(unacceptedBrisqueScores)/len(unacceptedBrisqueScores), 2))
                print("         MAX: ", max(unacceptedBrisqueScores))
                print("         MIN: ", min(unacceptedBrisqueScores))

    # Runs the image viewer
    # Browse the sampled images
    # Save or delete the samples
    def view_sample_images(fileIn):

        # Get the image from the list of files in the sample.  Save it to memory.
        def get_image():
            # Set image from sampledPhotos
            imgFilename = photosList[imgNum]
            imgFilepath = fileIn + "\\" + imgFilename
            try:
                image = Image.open(imgFilepath)
                image = ImageOps.exif_transpose(image) # Re-orient image based on exif data
                image = image.resize([calculate_width(image), fixed_height]) # Resize the image
                image = image.convert('RGBA') # Change color mode to something acceptable for saving as PNG

                # Save image to memory
                bio = io.BytesIO()
                image.save(bio, format="PNG")

                return bio
            except Exception as e:
                print("ERROR: " + e)
                sg.popup_no_buttons("Error: A non-image file made it into the sample.", keep_on_top=True, modal=True)
                sys.exit()

        # Calculate the width based on a fixed height
        def calculate_width(image):
            height_percent = (fixed_height / float(image.size[1]))
            width_size = int((float(image.size[0]) * float(height_percent)))
            return width_size
        
        # When Prev or Next buttons are clicked, update the image, file counter, and file path
        def update_image():
            # Get a reference to image saved in memory
            bio = get_image()
            try:
                imageViewerWindow["-IMAGE-"].update(data=bio.getvalue())
            except Exception as e:
                print("ERROR: " + e)
                sg.popup_no_buttons("Error: Problem reading image.", keep_on_top=True, modal=True)
            
            # Update the file counter and file path
            imageViewerWindow["-IMAGECOUNT-"].update(str(imgNum+1) + " / " + str(len(photosList)))
            imageViewerWindow["-FILE-"].update(fileIn + "\\" + photosList[imgNum])

        # Prompt the user to rename the sample. This occurs when the user wants to make a new sample or save 'Current Sample'
        def rename_sample(fileIn, window):

            # Create rename_sample window
            renameSampleWindow = window
            renameSampleWindow["-SAMPLENAMEINPUT-"].set_focus()

            # Prohibited folder name characters
            badChars = ['/', '\\', ':', '*', '?', '"', '<', '>', '|']

            # rename_sample Event Loop
            while True:
                event, values = renameSampleWindow.read()

                if event == sg.WIN_CLOSED:
                    renameSampleWindow.close()
                    return None

                # Save the new same to the dictionary and open the choose_collection_for_sample window
                if event == "Submit":
                    # Get sample name from listBox element
                    sampleName = values["-SAMPLENAMEINPUT-"]

                    # Filepath to check if the sample name is already in use
                    path = fileIn + "\\" + sampleName

                    # Controls whether to accept the sample name
                    acceptableName = True

                    # Don't allow a sample name above 25 characters
                    if len(sampleName) > 25:
                        sg.popup_no_buttons("Name too long.", title="", auto_close=True, auto_close_duration=1.5, keep_on_top=True, modal=True)
                        acceptableName = False

                    # Don't allow an empty sample name
                    elif sampleName == "":
                        sg.popup_no_buttons("Please enter a name.", title="", auto_close=True, auto_close_duration=1.5, keep_on_top=True, modal=True)
                        acceptableName = False
                    
                    else:
                        # If the sample name is already in globalSaveDict, do not accept it.
                        for key in globalSaveDict.keys():
                            if (sampleName == key):
                                sg.popup_no_buttons("Name taken.", title="", auto_close=True, auto_close_duration=1.5, keep_on_top=True, modal=True)
                                acceptableName = False

                        # Don't allow duplicate folder names
                        if os.path.exists(path):
                            sg.popup_no_buttons("Name taken.", title="", auto_close=True, auto_close_duration=1.5, keep_on_top=True, modal=True)
                            acceptableName = False

                        # Don't allow prohibited folder name characters
                        for char in badChars:
                            if char in sampleName:
                                sg.popup_no_buttons("Folder name cannot contain /, \\, :, *, ?, \", <, >, or |.", title="", auto_close=True, auto_close_duration=3, keep_on_top=True, modal=True)
                                acceptableName = False

                    # If the sample name is not a duplicate, update globalSaveDict
                    if acceptableName:
                        # Save new name to globalSaveDict
                        globalSaveDict[sampleName] = globalSaveDict.pop("Current Sample")
                        renameSampleWindow.close()
                        return sampleName

        # Set index to 0 for first image in imageViewerWindow
        imgNum = 0

        # Image fixed height
        fixed_height = 600
        
        # Get initial list of accepted sampled photos to populate the viewer
        photosList = globalSaveDict[list(globalSaveDict)[-1]][0]

        # Set this to avoid double clicks on radio buttons
        radioControl = "Accepted"

        # Get a reference to image saved in memory
        bio = get_image()

        # Fix formatting
        fileIn = fileIn.replace("\\\\", "\\")
        fileIn = fileIn.replace("/", "\\")

        # Create Image Viewer window
        imageViewerWindow = make_window_image_viewer(bio, imgNum, photosList, fixed_height, fileIn)

        # Check if there are any rejected photos for this sample.  If not, disable the reject radio
        if len(globalSaveDict[list(globalSaveDict)[-1]][1]) == 0:
            imageViewerWindow["-REJECTEDRADIO-"].update(disabled=True)

        # imageViewerWindow event loop
        while True:
            if radioControl == "Accepted":
                imageViewerWindow["-ADDTOSAMPLE-"].update(disabled=True)
                imageViewerWindow["-REMOVEFROMSAMPLE-"].update(disabled=False)
            else:
                imageViewerWindow["-REMOVEFROMSAMPLE-"].update(disabled=True)
                imageViewerWindow["-ADDTOSAMPLE-"].update(disabled=False)

            # Get events and values from the window
            event, values = imageViewerWindow.read()

            # Bind the left and right keyboard arrows to the 'Next' and 'Prev' buttons
            imageViewerWindow.bind('<Right>', 'Next')
            imageViewerWindow.bind('<Left>', 'Prev')

            if event == sg.WIN_CLOSED:
                if ask_to_save():
                    view_sample_images(fileIn)
                    break
                    
            if event == "Exit":
                ask_to_save()

            # Get the currently selected item in the samples list box
            selectedSampleName = imageViewerWindow["-SAMPLESLISTBOX-"].get()[0]

            # If not already selected, update the image viewer to show accepted sampled photos
            if radioControl != "Accepted":
                if event == "-ACCEPTEDRADIO-":
                    # Get initial list of accepted photos to populate the viewer
                    photosList = globalSaveDict[selectedSampleName][0]
                    imgNum = 0
                    update_image()
                    radioControl = "Accepted"

            # If not already selected, update the image viewer to show rejected sampled photos
            if radioControl != "Rejected":
                if event == "-REJECTEDRADIO-":
                    # Get initial list of rejected photos to populate the viewer
                    photosList = globalSaveDict[selectedSampleName][1]
                    imgNum = 0
                    update_image()
                    radioControl = "Rejected"

            if event == "-REMOVEFROMSAMPLE-":
                if len(photosList) != 1:
                    globalSaveDict[selectedSampleName][1].append(globalSaveDict[selectedSampleName][0].pop(imgNum))
                    # Get initial list of rejected photos to populate the viewer
                    photosList = globalSaveDict[selectedSampleName][0]
                    if len(photosList) == 0:
                        radioControl = "Rejected"
                        imageViewerWindow["-REJECTEDRADIO-"].update(value=True)
                        photosList = globalSaveDict[selectedSampleName][1]
                    if imgNum > (len(photosList)-1):
                        imgNum -= 1
                    update_image()
                    imageViewerWindow["-REJECTEDRADIO-"].update(disabled=False)
                else:
                    sg.popup_no_buttons("Can't remove last photo.", title="", auto_close=True, auto_close_duration=1.5, keep_on_top=True, modal=True)

            if event == "-ADDTOSAMPLE-":
                globalSaveDict[selectedSampleName][0].append(globalSaveDict[selectedSampleName][1].pop(imgNum))
                # Get initial list of rejected photos to populate the viewer
                photosList = globalSaveDict[selectedSampleName][1]
                if len(photosList) == 0:
                    radioControl = "Accepted"
                    imageViewerWindow["-ACCEPTEDRADIO-"].update(value=True)
                    imageViewerWindow["-REJECTEDRADIO-"].update(disabled=True)
                    photosList = globalSaveDict[selectedSampleName][0]
                elif imgNum > (len(photosList)-1):
                    imgNum -= 1
                update_image()

            # Move through next/prev images in sample
            if event == "Prev":
                if imgNum != 0:
                    imgNum -= 1
                    update_image()

            if event == "Next":
                if imgNum != len(photosList)-1:
                    imgNum += 1
                    update_image()

            # Move back to collectionPickerWindow
            if event == "Create Another Sample":
                # Rename 'Current Sample' before creating another sample
                if "Current Sample" in globalSaveDict:
                    window = make_window_rename_current_sample()
                    sampleName = rename_sample(fileIn, window)

                    # If rename_sample returns None, then the sample name was not renamed
                    if sampleName != None:
                        imageViewerWindow.close()
                        choose_collection_for_sample(fileIn)
                else:
                    imageViewerWindow.close()
                    choose_collection_for_sample(fileIn)

            # Save the current selected sample
            if event == "Save":

                # If the sample name is 'Current Sample', rename it then save.  Else save sample
                if selectedSampleName == "Current Sample":
                    window = make_window_rename_sample()

                    # Get user input for new sample name
                    selectedSampleName = rename_sample(fileIn, window)

                    # If rename_sample returns None, then the sample name was not renamed
                    if selectedSampleName != None:
                        sg.popup_no_buttons("Saving...", title="", non_blocking=True, keep_on_top=True, modal=True)
                        saveSample(fileIn, selectedSampleName)
                        imageViewerWindow.close()
                        sys.exit()
                else:
                    sg.popup_no_buttons("Saving...", title="", non_blocking=True, keep_on_top=True, modal=True)
                    saveSample(fileIn, selectedSampleName)
                    imageViewerWindow.close()
                    sys.exit()

            # If a sample is clicked in the list box, update the photosList to show that sample
            if event == "-SAMPLESLISTBOX-":
                # Update the radio button and control to accepted
                radioControl = "Accepted"
                imageViewerWindow["-ACCEPTEDRADIO-"].update(value=True)

                # Check if there are any rejected photos for this sample.  If not, disable the reject radio
                if len(globalSaveDict.get(imageViewerWindow["-SAMPLESLISTBOX-"].get()[0])[1]) == 0:
                    imageViewerWindow["-REJECTEDRADIO-"].update(disabled=True)
                else:
                    imageViewerWindow["-REJECTEDRADIO-"].update(disabled=False)

                # Update image viewer to show accepted sampled photos from the newly selected sample
                imgNum = 0
                photosList = globalSaveDict.get(imageViewerWindow["-SAMPLESLISTBOX-"].get()[0])[0]
                update_image()

    # Check if the image is corrupted.  If it is, an error is thrown
    def isCorrupted(fileimage):
        try:
            with Image.open(fileimage) as img:
                img.verify() # verify that it is, in fact an image
            return False
        except Exception as e:
            print(e)
            return True

    # Runs the Collection Picker Window
    # Enter file input path
    # Pick a percentage for the sample of a collection
    def choose_collection_for_sample(fileIn):

        # Create Collection Picker window
        collectionPickerWindow = make_window_collection_picker()

        # If there is at least 1 sample, update the collection picker to disable the file input.
        if len(globalSaveDict) > 0:
            collectionPickerWindow["-INPUTPATH-"].update(fileIn)
            collectionPickerWindow["-INPUTPATH-"].update(disabled=True)
            collectionPickerWindow["-BROWSE-"].update(disabled=True)

        # Event Loop
        while True:
            # Get events and values from the window
            event, values = collectionPickerWindow.read()

            if event == sg.WIN_CLOSED:
                # If there is at least one sample in the dictionary, ask if the user wants to save.
                if len(globalSaveDict) == 0:
                    sys.exit()
                elif ask_to_save():
                    view_sample_images(fileIn)
                    break
                else:
                    sys.exit()

            if event == "-EXITBUTTON-":
                # If there is at least one sample in the dictionary, ask if the user wants to save.
                if len(globalSaveDict) == 0:
                    sys.exit()
                elif ask_to_save():
                    collectionPickerWindow.close()
                    view_sample_images(fileIn)
                    break
                else:
                    sys.exit()

            # On press of "OK" button, take a sample of a collection of photos
            if event == "-OKBUTTON-":
                # Set file I/O
                fileIn = values['-INPUTPATH-'].replace("\b\\\b","\\\\")  # Location of photos to be sampled

                # Check for formatting issues before checking the folder paths
                if not os.path.exists(fileIn):
                    sg.popup_no_buttons("Invalid source folder path!", title="", auto_close=True, auto_close_duration=1.8, keep_on_top=True, modal=True)                  
                else:
                    # Disable elements while the sampler is running
                    collectionPickerWindow["-BROWSE-"].update(disabled=True)
                    collectionPickerWindow["-INPUTPATH-"].update(disabled=True)
                    collectionPickerWindow["-SLIDER-"].update(disabled=True)
                    collectionPickerWindow["-BLURCHECKBOX-"].update(disabled=True)
                    collectionPickerWindow["-BRISQUECHECKBOX-"].update(disabled=True)
                    collectionPickerWindow["-OKBUTTON-"].update(disabled=True)
                    collectionPickerWindow["-EXITBUTTON-"].update(disabled=True)

                    # User sets the percent of collection they want
                    chance = values["-SLIDER-"]

                    # List of files in source folder
                    sourceFileList = os.listdir(fileIn)

                    # Initialize file counter for source read
                    fileInCount = 0

                    # Blur filter selected.
                    isBlur = values["-BLURCHECKBOX-"]

                    # BRISQUE filter selected.
                    isBrisque = values["-BRISQUECHECKBOX-"]

                    # Clean up the sourceFileList
                    for collectionPhoto in sourceFileList[:]:
                        # Get the extension of the file and check against acceptedFileTypes
                        if "." in collectionPhoto:
                            splitFileName = collectionPhoto.split(".")
                            ext = splitFileName[1]
                            if (ext not in acceptedFileTypes):
                                sourceFileList.remove(collectionPhoto)
                        else:
                            sourceFileList.remove(collectionPhoto)

                    # Get length for use when updating FILECOUNTER
                    sourceFileListLen = len(sourceFileList)

                    # Initialize lists to hold names of photos picked for the sample
                    sampledPhotos = []

                    # Initialize lists to hold names of photos rejected for the sample
                    rejectedSampledPhotos = []

                    # TESTING
                    # Initialize dictionaries to store info on image quality assessment scores
                    accepted = {}
                    unaccepted = {}

                    # Copy a sample from source folder to output folder
                    for collectionPhoto in sourceFileList:
                        # Update the file counter
                        collectionPickerWindow["-FILEINCOUNTER-"].update(str(fileInCount) + " / " + str(sourceFileListLen))
                        collectionPickerWindow.refresh()
                        fileInCount+=1

                        # Copy photos based on chance to create a sample
                        if 100*random.random() <= chance:
                            path=os.path.join(fileIn, collectionPhoto)

                            # Ignore the image if it is corrupted.
                            if not isCorrupted(path):
                                # Read image for image quality assessment
                                img = cv.imread(path)

                                if isBlur:
                                    # Get blur score.  Low score == blurry
                                    grey = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
                                    blurScore = cv.Laplacian(grey, cv.CV_64F).var()

                                if isBrisque:
                                    # Get image quality score (BRISQUE method)
                                    # BRISQUE values typically range between 0 (Very good quality) and 150 (very bad quality).
                                    # Some clean images may show high BRISQUE values based on the nature of the image.
                                    x = torch.tensor(img).permute(2, 0, 1)[None, ...] / 255.
                                    brisqueScore = piq.brisque(x, data_range=1., reduction='none')

                                if (isBlur and isBrisque):
                                    # If blurScore and brisqueScore are acceptable, copy photo to sample
                                    if (blurScore > 10 and brisqueScore.item() < 75):
                                        # Add the photo file name to list
                                        sampledPhotos.append(collectionPhoto)

                                        # TESTING
                                        # Build dictionary of accepted image quality assessment scores
                                        if isTesting:
                                            accepted[collectionPhoto] = [round(blurScore, 2), round(brisqueScore.item(), 2)]
                                    else:
                                        # Add the photo file name to list
                                        rejectedSampledPhotos.append(collectionPhoto)

                                        # TESTING
                                        # Build dictionary of unaccepted image quality assessment scores
                                        if isTesting:
                                            unaccepted[collectionPhoto] = [round(blurScore, 2), round(brisqueScore.item(), 2)]
                                elif isBlur:
                                    if (blurScore > 10):
                                        # Add the photo file name to list
                                        sampledPhotos.append(collectionPhoto)

                                        # TESTING
                                        # Build dictionary of accepted image quality assessment scores
                                        if isTesting:
                                            accepted[collectionPhoto] = [round(blurScore, 2)]
                                    else:
                                        # Add the photo file name to list
                                        rejectedSampledPhotos.append(collectionPhoto)

                                        # TESTING
                                        # Build dictionary of unaccepted image quality assessment scores
                                        if isTesting:
                                            unaccepted[collectionPhoto] = [round(blurScore, 2)]
                                elif isBrisque:
                                    if (brisqueScore < 75):
                                        # Add the photo file name to list
                                        sampledPhotos.append(collectionPhoto)

                                        # TESTING
                                        # Build dictionary of accepted image quality assessment scores
                                        if isTesting:
                                            accepted[collectionPhoto] = [round(brisqueScore.item(), 2)]
                                    else:
                                        # Add the photo file name to list
                                        rejectedSampledPhotos.append(collectionPhoto)

                                        # TESTING
                                        # Build dictionary of unaccepted image quality assessment scores
                                        if isTesting:
                                            unaccepted[collectionPhoto] = [round(brisqueScore.item(), 2)]
                                else:
                                    sampledPhotos.append(collectionPhoto)

                    # global isTesting controls whether test results are printed
                    if isTesting and (isBlur or isBrisque):
                        testing(isBlur, isBrisque, accepted, unaccepted)
                    
                    # If no photos were sampled, notify user
                    # Else, save the current sample to the dictionary
                    if len(sampledPhotos) == 0:
                        collectionPickerWindow["-FILEINCOUNTER-"].update("")
                        collectionPickerWindow.refresh()
                        sg.popup_no_buttons("Sample is too small!", "Try a larger percentage.", title="", auto_close=True, auto_close_duration=1.8, keep_on_top=True, modal=True)
                        
                        # Re-enable elements if the sample is too small
                        collectionPickerWindow["-BROWSE-"].update(disabled=False)
                        collectionPickerWindow["-INPUTPATH-"].update(disabled=False)
                        collectionPickerWindow["-SLIDER-"].update(disabled=False)
                        collectionPickerWindow["-BLURCHECKBOX-"].update(disabled=False)
                        collectionPickerWindow["-BRISQUECHECKBOX-"].update(disabled=False)
                        collectionPickerWindow["-OKBUTTON-"].update(disabled=False)
                        collectionPickerWindow["-EXITBUTTON-"].update(disabled=False)

                        # If there is at least 1 sample, update the collection picker to disable the file input.
                        if len(globalSaveDict) > 0:
                            collectionPickerWindow["-INPUTPATH-"].update(fileIn)
                            collectionPickerWindow["-INPUTPATH-"].update(disabled=True)
                            collectionPickerWindow["-BROWSE-"].update(disabled=True)
                    else:
                        collectionPickerWindow.close()
                        globalSaveDict["Current Sample"] = [sampledPhotos, rejectedSampledPhotos]

                        # Open Image Viewer window
                        view_sample_images(fileIn)

    # Ask the user whether they would like to save a sample
    def ask_to_save():
        askToSaveWindow = make_window_ask_to_save()

        while True:
            event, values = askToSaveWindow.read()

            if event == sg.WIN_CLOSED:
                sys.exit()

            if event == "Yes":
                askToSaveWindow.close()
                return True

            if event == "No":
                sys.exit()

    # Go to collection picker window
    choose_collection_for_sample(fileIn)

# MAIN
if __name__ == "__main__":
    main()