#1 sample files and move to new location
from calendar import c
import os
import stat
import io
import shutil
import PySimpleGUI as sg
from PIL import Image
import random

def main():
    # Set the theme
    sg.theme("DarkAmber")

    # Set accepted file types
    acceptedFileTypes = ["jpg", "png", "tiff", "tif"]

    # Create Collection Picker window
    def make_window_collection_picker():
        sampleLayout = [[sg.Text("Source Folder Path"), sg.InputText(key="-INPUTPATH-"), sg.FolderBrowse(initial_folder="M:\\Library\\Library Units\\Archives\\Archives team")],
                    [sg.Text("Choose an amount (%):"), sg.Slider(range=(1,100), default_value=1, size=(30, 15), orientation="horizontal", key="-SLIDER-")],
                    [sg.Button("Ok"), sg.Text("", key="-FILEINCOUNTER-", justification="right")]]

        return sg.Window("Image Sampler", sampleLayout, finalize=True)

    # Create Collection Picker window
    def make_window_image_viewer(bio, imgNum, photos, fixed_height):
        imageViewerLayout = [
            [sg.Image(data=bio.getvalue(), key="-IMAGE-")],
            [sg.Button("Prev"), sg.Text(str(imgNum+1) + " / " + str(len(photos)), key="-IMAGECOUNT-"), sg.Button("Next")]
        ]

        return sg.Window("Sample Image Viewer", imageViewerLayout, size=(1100,fixed_height+40), element_justification="c")

    def make_window_ask_to_save():
        savePopupLayout = [
                            [sg.Text(text="Would you like to save this sample?")],
                            [sg.Button("Save"), sg.Button("Delete")]
                        ]
        return sg.Window("",savePopupLayout, element_justification="c", keep_on_top=True, modal=True)

    # Runs the image viewer
    # Browse the sampled images
    # Save or delete the samples
    def view_sample_images(fileOut):
            # Set index to 0 for first image in imageViewerWindow
            imgNum = 0

            # Image fixed height
            fixed_height = 600

            outputFileList = os.listdir(fileOut)

            for samplePhoto in outputFileList[:]:
                # Get the extension of the file and check against acceptedFileTypes
                splitFileName = samplePhoto.split(".")
                ext = splitFileName[1]
                if (ext not in acceptedFileTypes):
                    outputFileList.remove(samplePhoto)

            # Set image from photos
            imgFilename = outputFileList[imgNum]
            imgFilepath = fileOut + "\\" + imgFilename
            os.path.exists(imgFilepath)
            image = Image.open(imgFilepath)

            # Calculate the width size based on resizing to a fixed height
            def calculate_width(image):
                height_percent = (fixed_height / float(image.size[1]))
                width_size = int((float(image.size[0]) * float(height_percent)))
                return width_size
            
            # When Prev or Next buttons are clicked, update the image and file counter
            def update_image():
                imgFilename = outputFileList[imgNum]
                imgFilepath = fileOut + "\\" + imgFilename

                if os.path.exists(imgFilepath):
                    image = Image.open(imgFilepath)
                    image = image.resize((calculate_width(image), fixed_height))
                    bio = io.BytesIO()
                    image.save(bio, format="PNG")
                    imageViewerWindow["-IMAGE-"].update(data=bio.getvalue())
                    imageViewerWindow["-IMAGECOUNT-"].update(str(imgNum+1) + " / " + str(len(outputFileList)))

            # Ask the user if they want to save or delete the samples
            def ask_to_save():
                # Create ask_to_save window
                savePopup = make_window_ask_to_save()

                # Ask_to_save Event Loop
                while True:
                    # Get events and values from the window
                    event, values = savePopup.read()

                    if event == sg.WIN_CLOSED:
                        savePopup.close()
                        quit()

                    # If save is chosen, do nothing
                    if event == "Save":
                        savePopup.close()

                    # Initialized to check if sample files are set to 'Read-only'
                    readOnlyCheck = False

                    # If delete is chosen, iterate through files and remove them
                    if event == "Delete":
                        for file in outputFileList:
                            filepath = fileOut + "\\" + file
                            if os.path.exists(filepath):
                                # Handle files set as 'Read-only'
                                if os.access(filepath, os.W_OK):                                
                                    os.remove(filepath)
                                else:
                                    os.chmod(filepath, stat.S_IWRITE)
                                    os.remove(filepath)
                        savePopup.close()

            # Resize image
            image = image.resize((calculate_width(image), fixed_height))

            # Save image to memory
            bio = io.BytesIO()
            image.save(bio, format="PNG")

            # Create Image Viewer window
            imageViewerWindow = make_window_image_viewer(bio, imgNum, outputFileList, fixed_height)

            # imageViewerWindow event loop
            while True:
                # Get events and values from the window
                event, values = imageViewerWindow.read()
                if event == sg.WIN_CLOSED:
                    imageViewerWindow.close()
                    ask_to_save()

                if event == "Next":
                    if imgNum != len(outputFileList)-1:
                        imgNum += 1
                        update_image()

                if event == "Prev":
                    if imgNum != 0:
                        imgNum -= 1
                        update_image()

    # Runs the Collection Picker Window
    # Enter file input and output paths
    # Pick a percentage for the sample of a collection
    def choose_collection_for_sample():

        # Create Collection Picker window
        collectionPickerWindow = make_window_collection_picker()

        # Event Loop
        while True:
            # Get events and values from the window
            event, values = collectionPickerWindow.read()

            # Set file I/O
            fileIn = values['-INPUTPATH-'].replace("\\","\\\\")  # Location of photos to be sampled
            fileIn = fileIn.replace("\\\\\\\\uwpfs.ad.uwp.edu\\\\Departments", "M:") # Replace if server location is given

            fileOut = fileIn + "\\Samples"
    
            # Initialize file counter for source read
            fileInCount = 1

            if event == sg.WIN_CLOSED:
                collectionPickerWindow.close()
                quit()

            # On press of "OK" button, take a sample of a collection of photos
            if event == "Ok":
                if not os.path.exists(fileOut):
                    os.makedirs(fileOut)

                # Check for formatting issues before checking the folder paths
                if not os.path.exists(fileIn) or not os.path.exists(fileOut):
                    if not os.path.exists(fileIn):
                        sg.popup("Invalid source folder path!", keep_on_top=True, modal=True)                  
                else:
                    # User sets the percent of collection they want
                    chance = values["-SLIDER-"]

                    # Initialized to check if > 0 files have been copied
                    photoIsCopied = False

                    # List of files in source folder
                    sourceFileList = os.listdir(fileIn)

                    # Copy a sample from source folder to output folder
                    for collectionPhoto in sourceFileList[:]:
                        # Get the extension of the file and check against acceptedFileTypes
                        if "." in collectionPhoto:
                            splitFileName = collectionPhoto.split(".")
                            ext = splitFileName[1]
                            if (ext in acceptedFileTypes):
                                # Update the file counter
                                collectionPickerWindow["-FILEINCOUNTER-"].update(str(fileInCount) + " / " + str(len(sourceFileList)))
                                collectionPickerWindow.refresh()
                                fileInCount+=1

                                # Copy photos based on chance to create a sample
                                if 100*random.random() <= chance:
                                    path=os.path.join(fileIn, collectionPhoto)
                                    shutil.copy(path, fileOut)
                                    photoIsCopied = True
                            else:
                                sourceFileList.remove(collectionPhoto)
                        else:
                            sourceFileList.remove(collectionPhoto)

                    # If no photos were sampled, notify user
                    if not photoIsCopied:
                        sg.popup("Sample is too small! Try a larger percentage.", keep_on_top=True, modal=True)
                    else:
                        collectionPickerWindow.close()
                        # Open Image Viewer window
                        view_sample_images(fileOut)

    # Call func to open window for choosing a collection
    choose_collection_for_sample()

# MAIN
if __name__ == "__main__":
    main()