#1 sample files and move to new location
import os
import io
from random import Random
import shutil
import PySimpleGUI as sg
from itertools import islice
from PIL import Image
import random

def main():
    sg.theme('DarkAmber')  # Add a touch of color

    # All the stuff inside your window.
    sampleLayout = [[sg.Text('Source Folder Path'), sg.InputText(key='-INPUTPATH-')],
                [sg.Text('Output Folder Path'), sg.InputText(key='-OUTPUTPATH-')],
                [sg.Text('Choose an amount:'), sg.Slider(range=(1,100), default_value=1, size=(30, 12), orientation='horizontal', key='-SLIDER-')],
                [sg.Button('Ok'), sg.Text('', key='-FILEINCOUNTER-', justification='right')]]

    # Create the Window
    sampleWindow = sg.Window('Image Sampler', sampleLayout)

    #
    # sampleWindow event loop
    #
    while True:
        event, values = sampleWindow.read()

        chance = values['-SLIDER-']

        if event == sg.WIN_CLOSED:
            exit()

        # Set file I/O
        fileIn = "M:\\Library\\Library Units\\Archives\\Archives team\\Brandon\\UWPAC103Photos"
        # values['-INPUTPATH-'].replace("\\","\\\\")  # Location of photos to be sampled
        # fileIn = fileIn.replace("\\\\\\\\uwpfs.ad.uwp.edu\\\\Departments", "M:") # Replace if server location is given

        fileOut = "M:\\Library\\Library Units\\Archives\\Archives team\\Brandon\\SAMPLES TEST"
        # values['-OUTPUTPATH-'].replace("\\","\\\\")  # Location of photos to be sampled
        # fileOut = fileOut.replace("\\\\\\\\uwpfs.ad.uwp.edu\\\\Departments", "M:") # Replace if server location is given

        # Set globalFileOut for use in imageViewerWindow
        sampleFilePath = fileOut

        fileInCount = 1

        # On press of "OK" button, take a sample of a collection of photos
        if event == "Ok":
            for root, subdirs, photos in os.walk(fileIn):
                
                for name in photos:
                    if ('.jpg' or '.png') not in name:
                        photos.remove(name)

                for filename in islice(photos, 0, len(photos), 1):
                    sampleWindow["-FILEINCOUNTER-"].update(str(fileInCount) + " / " + str(len(photos)-1))
                    sampleWindow.refresh()
                    fileInCount+=1
                    if 100*random.random() <= chance:
                        if filename != 'Thumbs.db':
                            path=os.path.join(root, filename)
                            shutil.copy(path, fileOut)
                # for filename in islice(photos, 1, len(photos), step):
                #     path=os.path.join(root, filename)
                #     shutil.copy(path, fileOut)

            sampleWindow.close()
            break

    # Set index to 0 for first image in imageViewerWindow
    imgNum = 0

    # Image fixed height
    fixed_height = 600

    # Get list of sample photo filenames
    for root, subdirs, photos in os.walk(sampleFilePath):
        for name in photos:
            if ('.jpg' or '.png') not in name:
                photos.remove(name)

    # Set image from photos
    imgFilename = photos[imgNum]
    imgFilepath = root + "\\" + imgFilename
    os.path.exists(imgFilepath)
    image = Image.open(imgFilepath)

    # Calculate the width size based on resizing to a fixed height
    def calculate_width(image):
        height_percent = (fixed_height / float(image.size[1]))
        width_size = int((float(image.size[0]) * float(height_percent)))
        return width_size
    
    # When Prev or Next buttons are clicked, update the image
    def update_image():
        imgFilename = photos[imgNum]
        imgFilepath = root + "\\" + imgFilename

        if os.path.exists(imgFilepath):
            image = Image.open(imgFilepath)
            image = image.resize((calculate_width(image), fixed_height))
            bio = io.BytesIO()
            image.save(bio, format="PNG")
            imageViewerWindow["-IMAGE-"].update(data=bio.getvalue())
            imageViewerWindow["-IMAGECOUNT-"].update(str(imgNum+1) + " / " + str(len(photos)))

    # Resize image
    image = image.resize((calculate_width(image), fixed_height))

    # Save image to memory
    bio = io.BytesIO()
    image.save(bio, format="PNG")

    # Create layout for imageViewerWindow
    imageViewerLayout = [
        [sg.Image(data=bio.getvalue(), key="-IMAGE-")],
        [sg.Button('Prev'), sg.Text(str(imgNum+1) + " / " + str(len(photos)), key="-IMAGECOUNT-"), sg.Button('Next')]
    ]

    # Create the Window
    imageViewerWindow = sg.Window('Sample Image Viewer', imageViewerLayout, size=(1100,fixed_height+40), element_justification='c')

    #
    # imageViewerWindow event loop
    #
    while True:
        event, values = imageViewerWindow.read()
        if event == sg.WIN_CLOSED:
            exit()

        if event == "Next":
            if imgNum != len(photos)-1:
                imgNum += 1
                update_image()

        if event == "Prev":
            if imgNum != 0:
                imgNum -= 1
                update_image()
            
        if event == "Exit":
            exit()

# MAIN
if __name__ == "__main__":
    main()